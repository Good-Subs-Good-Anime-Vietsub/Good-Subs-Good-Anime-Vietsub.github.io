---
interface Staff {
  role: string;
  name: string;
}

interface AnilistData {
  seasonYear?: number;
  startDate?: { year: number };
  studios?: { nodes: { name: string; siteUrl: string }[] };
  staff?: { edges: { role: string; node: { name: { full: string }; siteUrl: string } }[] };
  format?: string;
  episodes?: number;
  duration?: number;
  source?: string;
  genres?: string[];
}

import type { Member } from '../types/member'; // Import the new Member type

interface Props {
  anilist: AnilistData;
  staffs: Staff[];
  allMembers: Member[]; // Use the new Member type
}

const { anilist, staffs, allMembers } = Astro.props;
const year = anilist.startDate?.year ?? anilist.seasonYear;
const directorEdge = anilist.staff?.edges.find(e => e.role === 'Director');
const director = directorEdge?.node;
const studio = anilist.studios?.nodes[0];

// Helper function to process staff names
function processStaffNames(nameString: string, members: Member[]): string {
  const memberLinks: Record<string, string> = {};
  members.forEach(member => {
    // Ưu tiên link github của core member trước
    if (member.socials && member.socials.github) {
      memberLinks[member.name] = member.socials.github;
    } 
    // Sau đó mới fallback về memberUrl cho external member
    else if (member.memberUrl) {
      memberLinks[member.name] = member.memberUrl;
    }
  });

  // Tách chuỗi thành các phần có và không có dấu ngoặc vuông
  const parts = nameString.split(/(\[[^\]]+\])/g);

  const processedParts = parts.map(part => {
    // Kiểm tra xem phần này có phải là một tên trong dấu ngoặc vuông không
    if (part.startsWith('[') && part.endsWith(']')) {
      const nameInsideBrackets = part.substring(1, part.length - 1).trim();
      if (memberLinks[nameInsideBrackets]) {
        // Nếu có link, trả về thẻ <a>
        return `<a href="${memberLinks[nameInsideBrackets]}" target="_blank" rel="noopener noreferrer" class="text-cyan-400 hover:underline">${nameInsideBrackets}</a>`;
      } else {
        // Nếu không có link, trả về tên đã được thoát HTML
        return nameInsideBrackets.replace(/</g, '<').replace(/>/g, '>');
      }
    } else {
      // Nếu không phải là tên trong dấu ngoặc vuông, thoát HTML
      return part.replace(/</g, '<').replace(/>/g, '>');
    }
  });

  // Nối các phần lại với nhau
  return processedParts.join('');
}
---

<div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
  <div class="bg-gray-800/50 p-6 rounded-lg">
    <h3 class="text-xl font-bold text-cyan-400 mb-4 border-b border-gray-700 pb-3 flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-info"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
      Thông tin cơ bản
    </h3>
    <div class="space-y-2 text-base">
      {year && <p class="break-words"><strong class="mr-2 text-gray-400">Năm:</strong> {year}</p>}
      {studio && <p class="break-words"><strong class="mr-2 text-gray-400">Studio:</strong> <a href={studio.siteUrl} target="_blank" rel="noopener noreferrer" class="text-cyan-400 hover:underline">{studio.name}</a></p>}
      {director && <p class="break-words"><strong class="mr-2 text-gray-400">Đạo diễn:</strong> <a href={director.siteUrl} target="_blank" rel="noopener noreferrer" class="text-cyan-400 hover:underline">{director.name.full}</a></p>}
      {anilist.format && <p class="break-words"><strong class="mr-2 text-gray-400">Định dạng:</strong> {anilist.format.replace('_', ' ')}</p>}
      {anilist.episodes && <p class="break-words"><strong class="mr-2 text-gray-400">Số tập:</strong> {anilist.episodes}</p>}
      {anilist.duration && <p class="break-words"><strong class="mr-2 text-gray-400">Thời lượng:</strong> {anilist.duration} phút</p>}
      {anilist.source && <p class="break-words"><strong class="mr-2 text-gray-400">Nguồn gốc:</strong> {anilist.source.replace('_', ' ')}</p>}
      {anilist.genres && anilist.genres.length > 0 && <p class="break-words"><strong class="mr-2 text-gray-400">Thể loại:</strong> {anilist.genres.join(', ')}</p>}
    </div>
  </div>
  <div class="bg-gray-800/50 p-6 rounded-lg">
    <h3 class="text-xl font-bold text-cyan-400 mb-4 border-b border-gray-700 pb-3 flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
      Nhân lực
    </h3>
    <ul class="space-y-2 text-base text-gray-300">
      {staffs.map(staff => (
        <li class="break-words">
          <strong class="text-gray-200 mr-2">{staff.role}:</strong>
          <span set:html={processStaffNames(staff.name, allMembers)} />
        </li>
      ))}
    </ul>
  </div>
</div>
