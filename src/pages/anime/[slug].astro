---
// File: src/pages/anime/[slug].astro

import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';

// SỬA Ở ĐÂY: Đọc file JSON một cách thủ công phía server
import fs from 'node:fs/promises';
const detailsFile = await fs.readFile('public/data/anime-details.json', 'utf-8');
const allApiData = JSON.parse(detailsFile);

export async function getStaticPaths() {
  const animeEntries = await getCollection('anime');
  const allStaff = await getCollection('staff');

  return animeEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { 
      localEntry: entry,
      allStaff: allStaff,
    },
  }));
}

const { localEntry, allStaff } = Astro.props;
const { Content } = await localEntry.render(); // Lấy Content component từ MDX

const apiData = allApiData[localEntry.slug];

if (!apiData) {
  throw new Error(`Không tìm thấy dữ liệu API cho slug "${localEntry.slug}" trong file anime-details.json. Vui lòng chạy lại 'npm run build:search'.`);
}

const projectStaff = localEntry.data.project_staff;
---

<MainLayout title={apiData.title}>
  <div class="flex flex-col md:flex-row gap-8 items-start">
    <div class="w-full md:w-1/4 flex-shrink-0">
      <img src={apiData.images.webp.large_image_url} alt={apiData.title} class="w-full rounded-lg shadow-lg" width="600" height="900" />
      
      <div class="mt-4 p-4 bg-gray-800 rounded-lg">
        <p><strong>Trạng thái:</strong> {apiData.status}</p>
        <p><strong>Điểm MAL:</strong> {apiData.score}</p>
        <p><strong>Năm phát hành:</strong> {apiData.year}</p>
      </div>

      <div class="mt-4 p-4 bg-gray-800 rounded-lg">
        <p><strong>Trạng thái sub:</strong> {localEntry.data.status}</p>
      </div>

      {projectStaff && (
        <div class="mt-4 p-4 bg-gray-800 rounded-lg text-sm break-words">
          {projectStaff.map(item => (
            <div class="mb-2">
              <strong>{item.role}:</strong>
              {item.members.map((slug: string, index: number) => {
                const member = allStaff.find(s => s.slug.toLowerCase() === slug.toLowerCase());
                return (
                  <>
                    {member ? (
                      <a href={member.data.github_url} target="_blank" rel="noopener noreferrer" class="text-cyan-400 hover:underline">
                        {member.data.name}
                      </a>
                    ) : (
                      <span class="break-all">{slug}</span>
                    )}
                    {index < item.members.length - 1 && ', '}
                  </>
                );
              })}
            </div>
          ))}
        </div>
      )}

      <div class="mt-4 p-4 bg-gray-800 rounded-lg text-sm">
        <p><strong>Loại:</strong> {apiData.type}</p>
        <p><strong>Số tập:</strong> {apiData.episodes}</p>
        <p><strong>Thời lượng:</strong> {apiData.duration}</p>
        <p><strong>Rating:</strong> {apiData.rating}</p>
        <p><strong>Nguồn:</strong> {apiData.source}</p>
        <p><strong>Studio:</strong> {apiData.studios.map((s: { name: string }) => s.name).join(', ')}</p>
        <p><strong>Thể loại:</strong> {apiData.genres.map((g: { name: string }) => g.name).join(', ')}</p>
        {apiData.demographics.length > 0 && (
          <p><strong>Đối tượng:</strong> {apiData.demographics.map((d: { name: string }) => d.name).join(', ')}</p>
        )}
      </div>
    </div>

    <div class="w-full md:w-3/4">
      <h1 class="text-4xl font-bold">{apiData.title}</h1>
      {localEntry.data.viet_title && <h2 class="text-xl text-gray-400 mt-1">{localEntry.data.viet_title}</h2>}
      <h3 class="text-lg text-gray-400 mb-6">{apiData.title_japanese}</h3>
      <div class="mb-8">
        <h4 class="text-2xl font-bold border-l-4 border-cyan-400 pl-4 mb-4">Tóm tắt</h4>
        <div class="max-h-48 overflow-y-auto bg-gray-800/50 p-4 rounded-lg">
          <div class="prose prose-invert max-w-none">
            <p>{localEntry.data.synopsis_vi || apiData.synopsis}</p>
          </div>
        </div>
      </div>
      <div class="mb-8">
        <h4 class="text-2xl font-bold border-l-4 border-cyan-400 pl-4 mb-4">Link Tải</h4>
        <div class="flex flex-col gap-3">
          {localEntry.data.download_links.map(link => (
            <a href={link.url} target="_blank" rel="noopener noreferrer" class="flex items-center justify-center gap-3 bg-transparent border-2 border-cyan-500 text-cyan-400 font-semibold py-2 px-4 rounded-lg text-center transition-all duration-300 hover:bg-cyan-500 hover:text-white hover:border-cyan-500">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
              <span>{link.label}</span>
            </a>
          ))}
          {localEntry.data.download_links.length === 0 && (
            <p class="bg-gray-700 p-4 rounded-lg">Chưa có link tải cho series này.</p>
          )}
        </div>
      </div>
      <div>
        <h4 class="text-2xl font-bold border-l-4 border-cyan-400 pl-4 mb-4">Thông tin chi tiết</h4>
        <div class="prose prose-invert max-w-none bg-gray-800/50 p-4 rounded-lg">
          <Content />
        </div>
      </div>

      {/* Phần này không còn cần thiết vì ảnh sẽ được nhúng trực tiếp trong MDX */}
      {/* {imagesInCurrentDir.length > 0 && (
        <div class="mb-8">
          <h4 class="text-2xl font-bold border-l-4 border-cyan-400 pl-4 mb-4">Hình ảnh khác</h4>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {imagesInCurrentDir.map(imageSrc => (
              <img src={imageSrc} alt="Anime related image" class="w-full h-auto rounded-lg shadow-lg object-cover" />
            ))}
          </div>
        </div>
      )} */}
    </div>
  </div>
</MainLayout>
