---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import ProjectCard from '../../components/ProjectCard.tsx';

// --- ĐỊNH NGHĨA PROPS ---
interface Props {
  entry: CollectionEntry<'projects'>;
}

// --- LOGIC LẤY TẤT CẢ CÁC ĐƯỜNG DẪN ---
export async function getStaticPaths() {
  const allProjects = await getCollection('projects');
  return allProjects.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// --- LOGIC LẤY DỮ LIỆU CHO TRANG HIỆN TẠI ---
const { entry } = Astro.props;
const { Content } = await entry.render();

const query = `
  query ($id: Int) {
    Media(id: $id, type: ANIME) {
      id
      title { romaji native }
      bannerImage
      coverImage { extraLarge }
      seasonYear
      format
      episodes
      duration
      averageScore
      studios(isMain: true) { nodes { name } }
      staff(sort: RELEVANCE, perPage: 5) {
        edges {
          role
          node { name { full } }
        }
      }
    }
  }
`;
const response = await fetch('https://graphql.anilist.co', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
  body: JSON.stringify({ query, variables: { id: entry.data.anilistId } })
});
const anilist = (await response.json()).data.Media;

interface StaffEdge {
  role: string;
  node: { name: { full: string } };
}
const director = anilist.staff.edges.find((e: StaffEdge) => e.role === 'Director')?.node.name.full;
const studio = anilist.studios.nodes[0]?.name;
const { title_vietnamese, staffs, downloads, status } = entry.data;


// --- LOGIC TÌM CÁC DỰ ÁN LIÊN QUAN ---
const allProjects = await getCollection('projects');
const relatedProjects = allProjects
  // Lấy các dự án có status là 'Đang làm' HOẶC 'Hoàn thành'
  .filter(p => (p.data.status === 'Đang làm' || p.data.status === 'Hoàn thành') && p.slug !== entry.slug)
  .sort(() => 0.5 - Math.random()) 
  .slice(0, 5);  

const relatedProjectsDataPromises = relatedProjects.map(async (p) => {
  const relQuery = `query ($id: Int) { Media(id: $id, type: ANIME) { id, title { romaji }, coverImage { extraLarge }, seasonYear } }`;
  const relResponse = await fetch('https://graphql.anilist.co', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ query: relQuery, variables: { id: p.data.anilistId } }) });
  if (!relResponse.ok) return null;
  const json = await relResponse.json();
  if(!json.data) return null;
  const relAnilist = json.data.Media;
  if (!relAnilist) return null;
  return { slug: p.slug, data: p.data, anilist: relAnilist };
});
const relatedProjectsData = (await Promise.all(relatedProjectsDataPromises)).filter(p => p !== null);

const statusColors = {
  'Đang làm': 'green', 'Hoàn thành': 'cyan', 'Dự kiến': 'yellow', 'Tạm ngưng': 'red'
};
---
<style is:global>
  @import 'swiper/css';
  .prose iframe { width: 100%; aspect-ratio: 16 / 9; border-radius: theme('borderRadius.lg'); }
  .related-slider .swiper-slide { height: auto; display: flex; }
  .related-slider .swiper-slide > * { width: 100%; }
</style>

<Layout 
  title={`${anilist.title.romaji} | GSGA`}
  description={entry.body.substring(0, 150) + '...'}
  image={anilist.coverImage.extraLarge}
>
  <div class="max-w-5xl mx-auto">
    <!-- 1. BANNER -->
    {anilist.bannerImage && (
      <div class="w-full aspect-[21/9] rounded-lg overflow-hidden shadow-lg mb-8">
        <img src={anilist.bannerImage} alt={`Banner for ${anilist.title.romaji}`} class="w-full h-full object-cover" />
      </div>
    )}

    <!-- 2. TÊN DỰ ÁN -->
    <div class="text-center mb-12">
      <h1 class="text-5xl font-extrabold text-white">{anilist.title.romaji}</h1>
      <h2 class="text-2xl text-gray-400 mt-2">{anilist.title.native}</h2>
      {title_vietnamese && <h3 class="text-2xl text-cyan-400 mt-2">{title_vietnamese}</h3>}
    </div>

    <!-- 3. THÔNG TIN CƠ BẢN & NHÂN LỰC -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
      <div class="bg-gray-800/50 p-6 rounded-lg">
        <h3 class="text-xl font-bold text-cyan-400 mb-4 border-b border-gray-700 pb-3">Thông tin cơ bản</h3>
        <div class="space-y-2 text-base">
          <p><strong class="mr-2 text-gray-400">Năm:</strong> {anilist.seasonYear}</p>
          {studio && <p><strong class="mr-2 text-gray-400">Studio:</strong> {studio}</p>}
          {director && <p><strong class="mr-2 text-gray-400">Đạo diễn:</strong> {director}</p>}
          {anilist.format && <p><strong class="mr-2 text-gray-400">Định dạng:</strong> {anilist.format.replace('_', ' ')}</p>}
          {anilist.episodes && <p><strong class="mr-2 text-gray-400">Số tập:</strong> {anilist.episodes}</p>}
        </div>
      </div>
      <div class="bg-gray-800/50 p-6 rounded-lg">
        <h3 class="text-xl font-bold text-cyan-400 mb-4 border-b border-gray-700 pb-3">Nhân lực</h3>
        <ul class="space-y-2 text-base text-gray-300">
          {staffs.map(staff => (
            <li><strong class="text-white mr-2">{staff.role}:</strong> {staff.name}</li>
          ))}
        </ul>
      </div>
    </div>

    <!-- 4. LINK TẢI VỀ -->
    <div class="flex justify-center my-12">
      <div class="flex flex-wrap gap-4">
        {downloads.map(link => (
          <a href={link.url} target="_blank" class="group relative inline-block p-[2px] rounded-lg font-bold text-cyan-400 text-lg bg-gradient-to-r from-blue-600 to-cyan-500 transition-all duration-300 transform hover:-translate-y-1 active:scale-95">
            <span class="flex items-center gap-3 bg-gray-900 rounded-[7px] px-8 py-4 transition-colors duration-300 group-hover:bg-transparent group-hover:text-white">
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2" /><path d="M7 11l5 5l5 -5" /><path d="M12 4l0 12" /></svg>
              <span>{link.type}</span>
            </span>
          </a>
        ))}
      </div>
    </div>
    
    <!-- 5. VÙNG GỢI Ý (SLIDER) -->
    {relatedProjectsData.length > 0 && (
      <div class="mb-16">
        <h2 class="text-3xl font-bold mb-6 border-l-4 border-cyan-400 pl-4">Các dự án khác</h2>
        <div class="swiper related-slider -mx-6 px-6">
          <div class="swiper-wrapper">
            {relatedProjectsData.map(p => (
              <div class="swiper-slide">
                <ProjectCard project={p} colorName={statusColors[p.data.status]} />
              </div>
            ))}
          </div>
        </div>
      </div>
    )}

    <!-- 6. NỘI DUNG MARKDOWN -->
    <article class="prose prose-invert max-w-none prose-h2:text-3xl prose-h2:font-bold prose-h2:mb-6 prose-h2:border-l-4 prose-h2:border-cyan-400 prose-h2:pl-4 prose-img:rounded-lg prose-a:text-cyan-500 prose-a:no-underline hover:prose-a:underline hover:prose-a:text-cyan-400">
      <Content />
    </article>
  </div>
</Layout>

<script>
  import Swiper from 'swiper';

  const swiper = new Swiper('.related-slider', {
    spaceBetween: 12,
    slidesPerView: 'auto',
    breakpoints: {
      768: {
        slidesPerView: 4,
        spaceBetween: 16,
      },
    }
  });
</script>