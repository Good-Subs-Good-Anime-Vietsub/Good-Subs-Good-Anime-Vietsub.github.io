---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import ProjectBanner from '../../components/ProjectBanner.astro';
import ProjectHeader from '../../components/ProjectHeader.astro';
import ProjectActions from '../../components/ProjectActions.astro';
import ProjectDetails from '../../components/ProjectDetails.astro';
import RelatedProjects from '../../components/RelatedProjects.astro';
import anilistCache from '../../data/anilist-cache.json';
import allMembersData from '../../data/members.json'; // Import all members from the new JSON file
import type { AnilistCache, StaffEdge } from '../../types/anilist-cache';
import type { Member } from '../../types/member'; // Import the new Member type
import { getCommitDates } from '../../utils/git';
import { slugify, getRelatedProjects } from '../../utils/project';
import { type Project } from '../../components/ProjectCard.tsx';

const allMembers: Member[] = allMembersData as Member[];

// --- ĐỊNH NGHĨA PROPS ---
interface Props {
  entry: CollectionEntry<'projects'>;
}

// --- LOGIC LẤY TẤT CẢ CÁC ĐƯỜNG DẪN ---
export async function getStaticPaths() {
  const allProjects = await getCollection('projects');
  const paths = await Promise.all(allProjects.map(async (entry) => {
    const filePath = `src/content/projects/${entry.id}`;
    const { created, updated } = await getCommitDates(filePath);
    return {
      params: { slug: entry.slug },
      props: { entry: { ...entry, data: { ...entry.data, publishDate: created, lastUpdated: updated } } },
    };
  }));
  return paths;
}

// --- LOGIC LẤY DỮ LIỆU CHO TRANG HIỆN TẠI ---
const { entry } = Astro.props;
const { Content } = await entry.render();

// allMembers đã được import từ src/data/members.json

// Sử dụng dữ liệu từ cache thay vì gọi API
const anilist = ((anilistCache as unknown) as AnilistCache)[String(entry.data.anilistId)] || {
  title: { romaji: 'Không tìm thấy', native: '', english: '' },
  bannerImage: '',
  coverImage: { extraLarge: '' },
  seasonYear: null,
  format: null,
  episodes: null,
  duration: null,
  source: null,
  genres: [],
  studios: { nodes: [] },
  staff: { edges: [] }
};

const director = anilist.staff?.edges.find((e: StaffEdge) => e.role === 'Director')?.node.name.full;
const studio = anilist.studios?.nodes[0]?.name;
const { title_vietnamese, staffs, downloads, status } = entry.data;
const slugifiedStatus = slugify(status);


// --- LOGIC TÌM CÁC DỰ ÁN LIÊN QUAN (ĐÃ ĐƯỢC TÁI CẤU TRÚC) ---
const allProjects = await getCollection('projects');
const relatedProjects = getRelatedProjects(entry, allProjects, (anilistCache as unknown) as AnilistCache);

const relatedProjectsDataPromises = relatedProjects.map(async (p) => {
  const filePath = `src/content/projects/${p.id}`; // Sử dụng p.id để lấy đường dẫn
  const { created } = await getCommitDates(filePath);
  return {
    slug: p.slug,
    data: { ...p.data, publishDate: created }, // Thêm publishDate vào data
    anilist: ((anilistCache as unknown) as AnilistCache)[String(p.data.anilistId)] || {
      title: { romaji: 'Không tìm thấy', native: '', english: '' },
      coverImage: { extraLarge: '' },
      seasonYear: null,
    }
  };
});
const relatedProjectsData = (await Promise.all(relatedProjectsDataPromises)).filter(p => p.anilist) as Project[];
---
<style is:global>
  @import 'swiper/css';
  .prose iframe { width: 100%; aspect-ratio: 16 / 9; border-radius: theme('borderRadius.lg'); }
  .related-slider .swiper-slide { height: auto; overflow: hidden; padding-top: 1rem; padding-bottom: 1rem; position: relative; z-index: 1; }
  .related-slider .swiper-slide > * { width: 100%; }

  /* Quy tắc mới để vô hiệu hóa hiệu ứng hover cho ProjectCard trong slider này */
  .related-slider .swiper-slide .group:hover {
    transform: none !important;
    box-shadow: none !important;
  }
</style>

<Layout 
  title={`${anilist.title.romaji} | GSGA Fansub - Good Subs Good Anime`}
  description={entry.body.substring(0, 150) + '...'}
  image={anilist.coverImage.extraLarge}
  schema={JSON.stringify({
    "@context": "https://schema.org",
    "@type": anilist.format === 'MOVIE' ? 'Movie' : 'TVSeries',
    "name": anilist.title.romaji,
    "alternateName": anilist.title.native,
    "description": entry.body.substring(0, 150) + '...',
    "image": anilist.coverImage.extraLarge,
    "url": Astro.url.href,
    "genre": anilist.genres && anilist.genres.length > 0 ? anilist.genres : undefined,
    "director": director ? { "@type": "Person", "name": director } : undefined,
    "productionCompany": studio ? { "@type": "Organization", "name": studio } : undefined,
    "datePublished": entry.data.publishDate ? entry.data.publishDate.toISOString().split('T')[0] : undefined,
    "dateModified": entry.data.lastUpdated ? entry.data.lastUpdated.toISOString().split('T')[0] : undefined,
    "numberOfEpisodes": anilist.episodes || undefined
  })}
>
  <div class="max-w-5xl mx-auto">
    <ProjectBanner bannerImage={anilist.bannerImage} title={anilist.title.romaji} />
    <ProjectHeader 
      title={anilist.title.romaji} 
      titleVietnamese={title_vietnamese} 
      nativeTitle={anilist.title.native} 
      publishDate={entry.data.publishDate}
      lastUpdated={entry.data.lastUpdated}
    />
    <ProjectActions status={status} downloads={downloads} />
    <ProjectDetails anilist={anilist} staffs={staffs} allMembers={allMembers} />
    <RelatedProjects relatedProjects={relatedProjectsData} />

    <!-- 6. NỘI DUNG MARKDOWN -->
    <article class="prose prose-invert max-w-none prose-h2:text-2xl prose-h2:font-bold prose-h2:mb-6 prose-h2:border-l-4 prose-h2:border-cyan-400 prose-h2:pl-4 prose-img:rounded-lg prose-a:text-cyan-500 prose-a:no-underline hover:prose-a:underline hover:prose-a:text-cyan-400">
      <Content />
    </article>
  </div>
</Layout>

<script>
  import Swiper from 'swiper';

  const swiper = new Swiper('.related-slider', {
    spaceBetween: 4,
    slidesPerView: 'auto',
    breakpoints: {
      768: {
        slidesPerView: 5,
        spaceBetween: 8,
      },
    }
  });
</script>

<script is:inline define:vars={{ status, slugifiedStatus }}>
  const downloadLinkRegex = /\.(mp4|mkv|zip|rar|7z|torrent|pdf)$/i; // Regex để nhận diện link download

  if (status === 'Dự kiến' || status === 'Đang làm' || status === 'Tạm ngưng') {
    const proseArticle = document.querySelector('article.prose');
    if (proseArticle) {
      const links = proseArticle.querySelectorAll('a');
      links.forEach(link => {
        // Chỉ xử lý các liên kết có vẻ là liên kết download
        if (downloadLinkRegex.test(link.href)) {
          link.href = `/status/${slugifiedStatus}`;
        }
      });
    }
  }
</script>
